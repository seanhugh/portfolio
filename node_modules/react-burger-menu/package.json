{
  "_args": [
    [
      {
        "raw": "react-burger-menu",
        "scope": null,
        "escapedName": "react-burger-menu",
        "name": "react-burger-menu",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/mnt/c/Users/sean/Desktop/shigi/portfolio"
    ]
  ],
  "_from": "react-burger-menu@latest",
  "_id": "react-burger-menu@2.1.1",
  "_inCache": true,
  "_location": "/react-burger-menu",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-burger-menu-2.1.1.tgz_1497419710338_0.057802794966846704"
  },
  "_npmUser": {
    "name": "negomi",
    "email": "negomi.code@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-burger-menu",
    "scope": null,
    "escapedName": "react-burger-menu",
    "name": "react-burger-menu",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-burger-menu/-/react-burger-menu-2.1.1.tgz",
  "_shasum": "76c6d4fc6e075af10af41a5cc8acb6dd32b1775d",
  "_shrinkwrap": null,
  "_spec": "react-burger-menu",
  "_where": "/mnt/c/Users/sean/Desktop/shigi/portfolio",
  "author": {
    "name": "Imogen Wentworth"
  },
  "browserify": {
    "transform": [
      "browserify-optional"
    ]
  },
  "browserify-shim": {
    "react": "global:React",
    "react-dom": "global:ReactDOM",
    "snapsvg": "global:Snap"
  },
  "bugs": {
    "url": "https://github.com/negomi/react-burger-menu/issues"
  },
  "dependencies": {
    "browserify-optional": "^1.0.0",
    "classnames": "^2.1.1",
    "eve": "~0.4.2",
    "prop-types": "^15.5.8",
    "snapsvg-cjs": "0.0.4"
  },
  "description": "An off-canvas sidebar component with a collection of effects and styles using CSS transitions and SVG path animations",
  "devDependencies": {
    "babel-core": "^6.3.26",
    "babel-eslint": "^7.0.0",
    "babel-preset-env": "^1.4.0",
    "babel-preset-react": "^6.3.13",
    "babel-register": "^6.3.13",
    "chai": "^3.2.0",
    "eslint": "^3.0.0",
    "eslint-plugin-react": "^6.0.0",
    "gulp": "^3.8.11",
    "gulp-git": "^2.0.0",
    "gulp-mocha": "^3.0.0",
    "jsdom": "^9.0.0",
    "mocha": "^3.0.0",
    "react": "^15.4.1",
    "react-component-gulp-tasks": "^0.7.1",
    "react-dom": "^15.4.1",
    "react-test-renderer": "^15.5.4",
    "sinon": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "76c6d4fc6e075af10af41a5cc8acb6dd32b1775d",
    "tarball": "https://registry.npmjs.org/react-burger-menu/-/react-burger-menu-2.1.1.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "e021ff84af3070673bf9363a7d4ad263fb2be1fc",
  "homepage": "https://github.com/negomi/react-burger-menu",
  "keywords": [
    "component",
    "hamburger",
    "menu",
    "react",
    "react-component"
  ],
  "license": "MIT",
  "main": "lib/BurgerMenu.js",
  "maintainers": [
    {
      "name": "negomi",
      "email": "negomi.code@gmail.com"
    }
  ],
  "name": "react-burger-menu",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.0 <16.0.0",
    "react-dom": ">=0.14.0 <16.0.0"
  },
  "readme": "react-burger-menu [![Build Status](https://travis-ci.org/negomi/react-burger-menu.svg?branch=master)](https://travis-ci.org/negomi/react-burger-menu)\n=================\n\nAn off-canvas sidebar React component with a collection of effects and styles using CSS transitions and SVG path animations.\n\n*Using Redux? Check out [redux-burger-menu](https://github.com/negomi/redux-burger-menu) for easy integration of react-burger-menu into your project.*\n\n## Demo & examples\n\nLive demo: [negomi.github.io/react-burger-menu](http://negomi.github.io/react-burger-menu/)\n\nTo build the examples locally, run:\n\n```\nnpm install\nnpm start\n```\n\nThen open [`localhost:8000`](http://localhost:8000) in a browser.\n\n## Tests\n\nThe test suite uses [Mocha](http://mochajs.org/), [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), with [jsdom](https://github.com/tmpvar/jsdom).\n\n*You will need at least Node v4.0.0 (or [io.js](https://iojs.org/en/index.html)) to run the tests, due to jsdom depending on it.*\n\nTo run the tests once, run:\n\n```\nnpm test\n```\n\nTo run them with a watcher, TDD style, run:\n\n```\nnpm run tdd\n```\n\n## Installation\n\nThe easiest way to use react-burger-menu is to install it from npm and include it in your own React build process (using [Browserify](http://browserify.org), [Webpack](http://webpack.github.io/), etc).\n\nYou can also use the standalone build by including `dist/react-burger-menu.js` in your page. If you use this, make sure you have already included React, and it is available as a global variable.\n\nIf you're using React 0.14+:\n\n```\nnpm install react-burger-menu --save\n```\n\nIf you're using React 0.13.3:\n\n```\nnpm install react-burger-menu@1.1.6 --save\n```\n\n## Usage\n\nItems for the sidebar should be passed as child elements of the component using JSX.\n\n``` javascript\nimport { nameOfAnimation as Menu } from 'react-burger-menu'\n\nclass Example extends React.Component {\n  showSettings (event) {\n    event.preventDefault();\n    .\n    .\n    .\n  }\n\n  render () {\n    return (\n      <Menu>\n        <a id=\"home\" className=\"menu-item\" href=\"/\">Home</a>\n        <a id=\"about\" className=\"menu-item\" href=\"/about\">About</a>\n        <a id=\"contact\" className=\"menu-item\" href=\"/contact\">Contact</a>\n        <a onClick={ this.showSettings } className=\"menu-item--small\" href=\"\">Settings</a>\n      </Menu>\n    );\n  }\n}\n```\n\n### Animations\n\n* `slide`\n* `stack`\n* `elastic`\n* `bubble`\n* `push`\n* `pushRotate`\n* `scaleDown`\n* `scaleRotate`\n* `fallDown`\n\n### Properties\n\nSome animations require certain other elements to be on your page:\n\n* **Page wrapper** - an element wrapping the rest of the content on your page (except elements with fixed positioning - see [the wiki](https://github.com/negomi/react-burger-menu/wiki/FAQ#i-have-a-fixed-header-but-its-scrolling-with-the-rest-of-the-page-when-i-open-the-menu) for details), placed after the menu component\n\n  ``` javascript\n  <Menu pageWrapId={ \"page-wrap\" } />\n  <main id=\"page-wrap\">\n    .\n    .\n    .\n  </main>\n  ```\n\n* **Outer container** - an element containing everything, including the menu component\n  ``` javascript\n  <div id=\"outer-container\">\n    <Menu pageWrapId={ \"page-wrap\" } outerContainerId={ \"outer-container\" } />\n    <main id=\"page-wrap\">\n      .\n      .\n      .\n    </main>\n  </div>\n  ```\n\nIf you are using an animation that requires either/both of these elements, you need to give the element an ID, and pass that ID to the menu component as the `pageWrapId` and `outerContainerId` props respectively.\n\nCheck this table to see which animations require these elements:\n\nAnimation | `pageWrapId` | `outerContainerId`\n--- | :---: | :---:\n`slide` | |\n`stack` | |\n`elastic` | &#x2713; | &#x2713;\n`bubble` | |\n`push` | &#x2713; | &#x2713;\n`pushRotate` |  &#x2713;  |  &#x2713;\n`scaleDown` |  &#x2713;  |  &#x2713;\n`scaleRotate` |  &#x2713;  |  &#x2713;\n`fallDown` |  &#x2713;  |  &#x2713;\n\n#### Position\n\nThe menu opens from the left by default. To have it open from the right, use the `right` prop. It's just a boolean so you don't need to specify a value. Then set the position of the button using CSS.\n\n``` javascript\n<Menu right />\n```\n\n#### Width\n\nYou can specify the width of the menu with the `width` prop. The default is `300`.\n\n``` javascript\n<Menu width={ 280 } />\n<Menu width={ '280px' } />\n<Menu width={ '20%' } />\n```\n\n#### Open state\n\nYou can control whether the sidebar is open or closed with the `isOpen` prop. This is useful if you need to close the menu after a user clicks on an item in it, for example, or if you want to open the menu from some other button in addition to the standard burger icon. The default value is `false`.\n\n``` javascript\n// To render the menu open\n<Menu isOpen />\n<Menu isOpen={ true } />\n\n// To render the menu closed\n<Menu isOpen={ false } />\n```\n\n*If you want to render the menu open initially, you will need to set this property in your parent component's `componentDidMount()` function.*\n\n#### State change\n\nYou can detect whether the sidebar is open or closed by passing a callback function to `onStateChange`. The callback will receive an object containing the new state as its first argument.\n\n``` javascript\nvar isMenuOpen = function(state) {\n  return state.isOpen;\n};\n\n<Menu onStateChange={ isMenuOpen } />\n```\n\n#### Overlay\n\nYou can turn off the default overlay with `noOverlay`.\n\n``` javascript\n<Menu noOverlay />\n```\n\n#### Custom icons\n\nYou can replace the default bars that make up the burger and cross icons with custom `ReactElement`s. Pass them as the `customBurgerIcon` and `customCrossIcon` props respectively.\n\n```javascript\n<Menu customBurgerIcon={ <img src=\"img/icon.svg\" /> } />\n<Menu customCrossIcon={ <img src=\"img/cross.svg\" /> } />\n```\n\nYou should adjust their size using the `.bm-burger-button` and `.bm-cross-button` classes, but the element itself will have the class `.bm-icon` or `.bm-cross` if you need to access it directly.\n\nYou can also disable the icon elements so they won't be included at all, by passing `false` to these props.\n\n```javascript\n<Menu customBurgerIcon={ false } />\n<Menu customCrossIcon={ false } />\n```\n\nThis can be useful if you want exclusive external control of the menu, using the `isOpen` prop.\n\n#### Custom ID and/or classNames\n\nThere are optional `id` and `className` props, which will simply add an ID or custom className to the rendered menu's outermost element. This is not required for any functionality, but could be useful for things like styling with CSS modules.\n\n``` javascript\n<Menu id={ \"sidebar\" } className={ \"my-menu\" } />\n```\n\nYou can also pass custom classNames to the other elements:\n\n``` javascript\n<Menu burgerButtonClassName={ \"my-class\" } />\n<Menu burgerBarClassName={ \"my-class\" } />\n<Menu crossButtonClassName={ \"my-class\" } />\n<Menu crossClassName={ \"my-class\" } />\n<Menu menuClassName={ \"my-class\" } />\n<Menu morphShapeClassName={ \"my-class\" } />\n<Menu itemListClassName={ \"my-class\" } />\n<Menu overlayClassName={ \"my-class\" } />\n```\n\n### Styling\n\nAll the animations are handled internally by the component. However, the visual styles (colors, fonts etc.) are not, and need to be supplied, either with CSS or with a JavaScript object passed as the `styles` prop.\n\n#### CSS\n\nThe component has the following helper classes:\n\n``` css\n/* Position and sizing of burger button */\n.bm-burger-button {\n  position: fixed;\n  width: 36px;\n  height: 30px;\n  left: 36px;\n  top: 36px;\n}\n\n/* Color/shape of burger icon bars */\n.bm-burger-bars {\n  background: #373a47;\n}\n\n/* Position and sizing of clickable cross button */\n.bm-cross-button {\n  height: 24px;\n  width: 24px;\n}\n\n/* Color/shape of close button cross */\n.bm-cross {\n  background: #bdc3c7;\n}\n\n/* General sidebar styles */\n.bm-menu {\n  background: #373a47;\n  padding: 2.5em 1.5em 0;\n  font-size: 1.15em;\n}\n\n/* Morph shape necessary with bubble or elastic */\n.bm-morph-shape {\n  fill: #373a47;\n}\n\n/* Wrapper for item list */\n.bm-item-list {\n  color: #b8b7ad;\n  padding: 0.8em;\n}\n\n/* Styling of overlay */\n.bm-overlay {\n  background: rgba(0, 0, 0, 0.3);\n}\n```\n\n#### JavaScript\n\nThe same styles can be written as a JavaScript object like this:\n\n```javascript\nvar styles = {\n  bmBurgerButton: {\n    position: 'fixed',\n    width: '36px',\n    height: '30px',\n    left: '36px',\n    top: '36px'\n  },\n  bmBurgerBars: {\n    background: '#373a47'\n  },\n  bmCrossButton: {\n    height: '24px',\n    width: '24px'\n  },\n  bmCross: {\n    background: '#bdc3c7'\n  },\n  bmMenu: {\n    background: '#373a47',\n    padding: '2.5em 1.5em 0',\n    fontSize: '1.15em'\n  },\n  bmMorphShape: {\n    fill: '#373a47'\n  },\n  bmItemList: {\n    color: '#b8b7ad',\n    padding: '0.8em'\n  },\n  bmOverlay: {\n    background: 'rgba(0, 0, 0, 0.3)'\n  }\n}\n\n<Menu styles={ styles } />\n```\n\n### Browser support\n\nBecause this project uses CSS3 features, it's only meant for modern browsers. Some browsers currently fail to apply some of the animations correctly.\n\nChrome and Firefox have full support, but Safari and IE have strange behavior for some of the menus.\n\n### Help\n\nCheck the FAQ (https://github.com/negomi/react-burger-menu/wiki/FAQ) to see if your question has been answered already, or [open a new issue](https://github.com/negomi/react-burger-menu/issues).\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/negomi/react-burger-menu.git"
  },
  "scripts": {
    "build": "gulp clean && NODE_ENV=production gulp build",
    "examples": "gulp dev:server",
    "lint": "eslint ./; true",
    "publish:site": "gulp publish:examples",
    "publish:version": "gulp commit:version && gulp push",
    "release": "npm run build && gulp bump && gulp release && npm run publish:version",
    "release:major": "npm run build && gulp bump:major && gulp release && npm run publish:version",
    "release:minor": "npm run build && gulp bump:minor && gulp release && npm run publish:version",
    "start": "gulp dev",
    "tdd": "gulp watch:tests --reporter min",
    "test": "gulp test --reporter list",
    "watch": "gulp watch:lib"
  },
  "version": "2.1.1"
}
